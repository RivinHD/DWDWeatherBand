<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:local="clr-namespace:DWDWeatherBand">

    <local:StandardColors x:Key="StandardColors"/>

    <Color x:Key="BackgroundColorLight">#FF4C4C4C</Color>
    <Color x:Key="BackgroundColor">#FF3E3E3E</Color>
    <Color x:Key="BackgroundColorTransparent50">#7F3E3E3E</Color>
    <Color x:Key="BackgroundColorDark">#FF212121</Color>
    <Color x:Key="BackgroundColorDarkLight">#FF2F2F2F</Color>
    <Color x:Key="ForegroundColor">White</Color>
    <Color x:Key="DisabledForegroundColor">LightGray</Color>
    <Color x:Key="SelectedForegroundColor">#FF7CDFFF</Color>
    
    <SolidColorBrush x:Key="BrushBackgroundColorLight" Color="{DynamicResource BackgroundColorLight}" />
    <SolidColorBrush x:Key="BrushBackgroundColor" Color="{DynamicResource BackgroundColor}" />
    <SolidColorBrush x:Key="BrushBackgroundColorTransparent50" Color="{DynamicResource BackgroundColorTransparent50}" />
    <SolidColorBrush x:Key="BrushBackgroundColorDark" Color="{DynamicResource BackgroundColorDark}"/>
    <SolidColorBrush x:Key="BrushBackgroundColorDarkLight" Color="{DynamicResource BackgroundColorDarkLight}"/>
    <SolidColorBrush x:Key="BrushForegroundColor" Color="{DynamicResource ForegroundColor}"/>
    <SolidColorBrush x:Key="BrushDisabledForegroundColor" Color="{DynamicResource DisabledForegroundColor}"/>
    <SolidColorBrush x:Key="BrushSelectedForegroundColor" Color="{DynamicResource SelectedForegroundColor}"/>

    <SolidColorBrush x:Key="HumidityColor" Color="#FF3DC1EC"/>

    <Style TargetType="{x:Type Control}" x:Key="MainTheme">
        <Setter Property="Background" Value="{DynamicResource BrushBackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource BrushForegroundColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBackgroundColor}" />
    </Style>
    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource MainTheme}"/>
    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource MainTheme}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border 
                        x:Name="Border"
                        Background="{DynamicResource BrushBackgroundColorDark}"
                        BorderBrush="{DynamicResource BrushBackgroundColor}" 
                        BorderThickness="1,1,1,1" 
                        CornerRadius="0,0,0,0" >
                            <ContentPresenter x:Name="ContentSite"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              ContentSource="Header"
                              Margin="12,2,12,2"
                              RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColorDark}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDark}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource MainTheme}"/>
    <Style x:Key="Transparent50" TargetType="{x:Type Label}" BasedOn="{StaticResource MainTheme}">
        <Setter Property="Background" Value="{DynamicResource BrushBackgroundColorTransparent50}" />
    </Style>
    <Style x:Key="Transparent" TargetType="{x:Type Label}" BasedOn="{StaticResource MainTheme}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style TargetType="{x:Type Path}" x:Key="Grid">
        <Setter Property="Stroke" Value="LightGray" />
    </Style>
    <Style TargetType="{x:Type Path}" x:Key="Draw">
        <Setter Property="Stroke" >
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,5" StartPoint="0.5,0">
                    <GradientStop Color="#FF7D00FF" Offset="5"/>
                    <GradientStop Color="#FF0027FF" Offset="4"/>
                    <GradientStop Color="#FF008FBF" Offset="3"/>
                    <GradientStop Color="#FF00B500" Offset="2"/>
                    <GradientStop Color="Yellow" Offset="1"/>
                    <GradientStop Color="Red"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource BrushBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDark}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushForegroundColor}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource BrushSelectedForegroundColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" 
                                             BorderBrush="{TemplateBinding BorderBrush}" 
                                             Background="{TemplateBinding Background}" 
                                             SnapsToDevicePixels="true">
                        <ScrollViewer Name="PART_ContentHost" Background="{TemplateBinding Background}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{DynamicResource BrushBackgroundColorLight}" Property="Background" />
                            <Setter Value="{DynamicResource BrushDisabledForegroundColor}" Property="Foreground" />
                            <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
                            Margin="2"
                            StrokeThickness="1"
                            Stroke="#60001B52"
                            StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MainTheme}">
        <Setter Property="Background" Value="{DynamicResource BrushBackgroundColorDarkLight}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDark}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                        x:Name="Border"  
                        CornerRadius="2" 
                        BorderThickness="1"
                        Background="{DynamicResource BrushBackgroundColor}"
                        BorderBrush="{DynamicResource BrushBackgroundColorDark}">
                        <ContentPresenter 
                            Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDarkLight}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDarkLight}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColorLight}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColorDark}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorLight}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColorDark}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDark}" />
                            <Setter Property="Foreground" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MainTheme}">
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDark}" />
    </Style>
    <Style TargetType="{x:Type Line}" x:Key="LineBold">
        <Setter Property="Stroke" Value="White" />
    </Style>
    <Style TargetType="{x:Type Line}" x:Key="LineThin">
        <Setter Property="Stroke" Value="White" />
        <Setter Property="StrokeThickness" Value="0.25" />
    </Style>
    <Style TargetType="{x:Type Line}" x:Key="LineThinDotted">
        <Setter Property="Stroke" Value="White" />
        <Setter Property="StrokeThickness" Value="0.25" />
        <Setter Property="StrokeDashArray" Value="20" />
        <Setter Property="StrokeDashOffset" Value="10" />
    </Style>
    
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
              x:Name="Border" 
              Grid.ColumnSpan="2"
              CornerRadius="2"
              Background="{DynamicResource BrushBackgroundColor}"
              BorderBrush="{DynamicResource BrushBackgroundColorDark}"
              BorderThickness="1" />
            <Border 
              Grid.Column="0"
              CornerRadius="2,0,0,2" 
              Margin="1" 
              Background="{DynamicResource BrushBackgroundColor}" 
              BorderBrush="{DynamicResource BrushBackgroundColorDark}"
              BorderThickness="0,0,1,0" />
            <Path 
              x:Name="Arrow"
              Grid.Column="1"     
              Fill="{DynamicResource BrushForegroundColor}"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Data="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColorLight}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColorDarkLight}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushBackgroundColorDark}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDarkLight}" />
                <Setter Property="Foreground" Value="{DynamicResource BrushForegroundColor}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource BrushDisabledForegroundColor}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Value="{DynamicResource BrushBackgroundColorLight}" Property="Background" />
                <Setter Value="{DynamicResource BrushDisabledForegroundColor}" Property="Foreground" />
                <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource BrushSelectedForegroundColor}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource MainTheme}">
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDark}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        Name="Border"
                        SnapsToDevicePixels="True"
                        Padding="3,2,2,2" 
                        CornerRadius="3,3,3,3">
                        <ContentPresenter
                            ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                            Content="{TemplateBinding ContentControl.Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsHighlighted" Value="True">
                            <Setter Property="Panel.Background" TargetName="Border" Value="{DynamicResource BrushBackgroundColorDark}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Panel.Background" TargetName="Border" Value="{DynamicResource BrushBackgroundColorDark}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ComboBox}" TargetType="ComboBox" BasedOn="{StaticResource MainTheme}">
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBackgroundColorDark}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                            Name="ContentSite"
                            IsHitTestVisible="False" 
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="Transparent"
                            Visibility="Hidden"
                            SelectionBrush="{DynamicResource BrushSelectedForegroundColor}"
                            Foreground="{DynamicResource BrushForegroundColor}"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Grid 
                              Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource BrushBackgroundColor}"
                                    BorderThickness="1"
                                    BorderBrush="{DynamicResource BrushBackgroundColorDark}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource BrushBackgroundColorDark}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="{DynamicResource BrushBackgroundColorDark}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{DynamicResource BrushBackgroundColor}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource BrushBackgroundColorLight}" VerticalAlignment="Center" Width="19"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource BrushForegroundColor}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDarkLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDark}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource BrushBackgroundColor}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource BrushForegroundColor}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource BrushForegroundColor}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDarkLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDark}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource BrushBackgroundColor}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource BrushForegroundColor}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource BrushForegroundColor}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDarkLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDark}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource BrushBackgroundColor}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource BrushForegroundColor}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource BrushForegroundColor}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDarkLight}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushSelectedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BrushBackgroundColorDark}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource BrushForegroundColor}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource BrushDisabledForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type CheckBox}"
       TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="FocusVisualStyle"
          Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                Width="13"
                                Height="13"
                                CornerRadius="0"
                                BorderThickness="1">    
                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0"
                                     EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{DynamicResource BackgroundColorDark}"
                                                    Offset="0.0" />
                                                <GradientStop Color="{DynamicResource BackgroundColorDark}"
                                                    Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0"
                                     EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{DynamicResource BackgroundColor}" />
                                                <GradientStop Color="{DynamicResource BackgroundColor}"
                                                    Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>

                                </Border.Background>
                                <Grid>
                                    <Path Visibility="Collapsed"
                                      Width="7"
                                      Height="7"
                                      x:Name="CheckMark"
                                      SnapsToDevicePixels="False"
                                      StrokeThickness="2"
                                      Data="M 0 0 L 7 7 M 0 7 L 7 0">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{DynamicResource ForegroundColor}" />
                                        </Path.Stroke>
                                    </Path>
                                    <Path Visibility="Collapsed"
                                          Width="7"
                                          Height="7"
                                          x:Name="InderminateMark"
                                          SnapsToDevicePixels="False"
                                          StrokeThickness="2"
                                          Data="M 0 7 L 7 0">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{DynamicResource ForegroundColor}" />
                                        </Path.Stroke>
                                    </Path>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{DynamicResource BackgroundColorLight}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{DynamicResource BackgroundColorDark}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{DynamicResource BackgroundColorLight}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{DynamicResource BackgroundColorLight}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="InderminateMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="4,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xctk:ColorPicker}">
        <Setter Property="DropDownBackground" Value="{DynamicResource BrushBackgroundColor}" />
        <Setter Property="DropDownBorderBrush" Value="{DynamicResource BrushBackgroundColorDark}" />
        <Setter Property="TabBackground" Value="{DynamicResource BrushBackgroundColor}" />
        <Setter Property="TabForeground" Value="{DynamicResource BrushForegroundColor}" />
        <Setter Property="ButtonStyle" Value="{StaticResource ToggleButtonStyle}" />
        <Setter Property="UsingAlphaChannel" Value="False" />
        <Setter Property="ShowAvailableColors" Value="False" />
        <Setter Property="StandardColors" Value="{Binding Source={StaticResource StandardColors}}" />
        <Setter Property="ShowRecentColors" Value="True" />
        <Setter Property="ShowDropDownButton" Value="False"/>
    </Style>
</ResourceDictionary>